// SPDX-License-Identifier:GPL-3.0
pragma solidity ^0.8.0;

interface IFotum {
    function updateNFTS() external;
}

contract FotumDynamicNFTKeeper {

    uint256 public interval;// = 4 * 7 * 24 * 60 * 60 - > 4 weeks
    uint256 public lastTimeStamp;
    IFotum Fotum;

    constructor(address _fotum, uint256 _interval) {
        Fotum = IFotum(_fotum);
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;
            Fotum.updateNFTS();
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }
}
